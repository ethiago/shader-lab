#version 400 compatibility
layout( vertices = 3 )  out;

in vec3 N[];
out vec3 cor[];
in vec2 texCoordIn[];
out vec2 texCoord[];

uniform vec2 wsize;
const float lod_factor = 10.0;


vec4 project(vec4 vertex){
    vec4 result = gl_ModelViewProjectionMatrix * vertex;
    result /= result.w;
    return result;
}

vec2 screen_space(vec4 vertex){
    return (clamp(vertex.xy, -1.3, 1.3)+1) * (wsize*0.5);
}

float level(vec2 v0, vec2 v1){
     return clamp(distance(v0, v1)/lod_factor, 1, 64);
}

bool offscreen(vec4 vertex){
  // tests if it's behind the camera
    if(vertex.z < -0.5){
        return true;
    }
  // checks the XY borders
    return any(
        lessThan(vertex.xy, vec2(-1.7)) ||
        greaterThan(vertex.xy, vec2(1.7))
    );  
}

void main(){
  #define id gl_InvocationID
  // simply transferring gl_Position from input to output
  gl_out[id].gl_Position = gl_in[id].gl_Position;
  texCoord[id] = texCoordIn[id];
  
  // the following code (inside the if block)
  // will be executed only once per patch
  // HLSL has a similar concept, using ConstantHullShader
  if( id == 0 ) {
    // projected the 4 corner control points
    vec4 v0 = project(gl_in[0].gl_Position);
    vec4 v1 = project(gl_in[1].gl_Position);
    vec4 v2 = project(gl_in[2].gl_Position);
    vec4 v3 = project(gl_in[3].gl_Position);

    if( all( bvec4(
      offscreen(v0),
      offscreen(v1),
      offscreen(v2),
      offscreen(v3)
    ))){
  // if all of them are outside the frustum,
  // the tess level is dropped to 0,
  // then no vertex will be produced by this patch
      gl_TessLevelInner[0] = 0;
      gl_TessLevelInner[1] = 0;
      gl_TessLevelOuter[0] = 0;
      gl_TessLevelOuter[1] = 0;
      gl_TessLevelOuter[2] = 0;
      gl_TessLevelOuter[3] = 0;
    }
    else{
      // defining the tessellation factor for each edge
      vec2 ss0 = screen_space(v0);
      vec2 ss1 = screen_space(v1);
      vec2 ss2 = screen_space(v2);
      vec2 ss3 = screen_space(v3);

      float e0 = level(ss1, ss2);
      float e1 = level(ss0, ss1);
      float e2 = level(ss3, ss0);
      float e3 = level(ss2, ss3);

      // finally, assigns the chosen factors
      // internal tessellation level is mixed halfway
      // of the related opposite edges
      gl_TessLevelInner[0] = mix(e1, e2, 0.5);
      gl_TessLevelInner[1] = mix(e0, e3, 0.5);
      gl_TessLevelOuter[0] = e0;
      gl_TessLevelOuter[1] = e1;
      gl_TessLevelOuter[2] = e2;
      gl_TessLevelOuter[3] = e3;
    }
  }
}